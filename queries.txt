-- Core    
-- Create table
CREATE TABLE films(
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) UNIQUE,
    genre VARCHAR(100),
    release_year INTEGER,
    score INTEGER
);

-- Seed
INSERT INTO films (title, genre, release_year, score) VALUES
    ('The Shawshank Redemption', 'Drama', 1994, 9),
    ('The Godfather', 'Crime', 1972, 9),
    ('The Dark Knight', 'Action', 2008, 9),
    ('Alien', 'SciFi', 1979, 9),
    ('Total Recall', 'SciFi', 1990, 8),
    ('The Matrix', 'SciFi', 1999, 8),
    ('The Matrix Resurrections', 'SciFi', 2021, 5),
    ('The Matrix Reloaded', 'SciFi', 2003, 6),
    ('The Hunt for Red October', 'Thriller', 1990, 7),
    ('Misery', 'Thriller', 1990, 7),
    ('The Power Of The Dog', 'Western', 2021, 6),
    ('Hell or High Water', 'Western', 2016, 8),
    ('The Good the Bad and the Ugly', 'Western', 1966, 9),
    ('Unforgiven', 'Western', 1992, 7);

-- All films
SELECT * FROM films;
-- All films ordered by rating descending
SELECT * FROM films ORDER BY score DESC;
-- All films ordered by release year ascending
SELECT * FROM films ORDER BY release_year ASC;
-- All films with a rating of 8 or higher
SELECT * FROM films WHERE score >= 8;
-- All films with a rating of 7 or lower
SELECT * FROM films WHERE score <= 7;
-- films released in 1990
SELECT * FROM films WHERE films.release_year = 1990;
-- films released before 2000
SELECT * FROM films WHERE films.release_year < 2000;
-- films released after 1990
SELECT * FROM films WHERE films.release_year > 1990;
-- films released between 1990 and 1999
SELECT * FROM films WHERE films.release_year BETWEEN 1990 AND 1999;
-- films with the genre of "SciFi"
SELECT * FROM films WHERE genre = 'SciFi';
-- films with the genre of "Western" or "SciFi"
SELECT * FROM films WHERE genre IN ('SciFi', 'Western');
-- films with any genre apart from "SciFi"
SELECT * FROM films WHERE genre != 'SciFi';
-- films with the genre of "Western" released before 2000
SELECT * FROM films WHERE genre = 'Western' AND release_year < 2000;
-- films that have the world "Matrix" in their title
SELECT * FROM films WHERE title LIKE '%Matrix%';

-- Extension 1
-- Return the average film rating
SELECT AVG(score) FROM films;
-- Return the total number of films
SELECT COUNT(id) FROM films;
-- Return the average film rating by genre
SELECT genre, AVG(score) FROM films GROUP BY genre;

-- Extension 2
DROP TABLE films;

CREATE TABLE directors(
    id SERIAL PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE films(
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) UNIQUE,
    genre VARCHAR(100),
    release_year INTEGER,
    score INTEGER,
    director_id INTEGER,
    CONSTRAINT director_fk FOREIGN KEY(director_id) REFERENCES directors(id)
);

INSERT INTO directors (name) VALUES
    ('Frank Darabont'),
    ('Francis Ford Coppola'),
    ('Christopher Nolan'),
    ('Ridley Scott'),
    ('Paul Verhoeven'),
    ('Lana Wachowski'),
    ('Lilly Wachowski'),
    ('John McTiernan'),
    ('Rob Reiner'),
    ('Jane Campion'),
    ('David Mackenzie'),
    ('Sergio Leone'),
    ('Clint Eastwood');

INSERT INTO films (title, genre, release_year, score, director_id) VALUES
    ('The Shawshank Redemption', 'Drama', 1994, 9, 1),
    ('The Godfather', 'Crime', 1972, 9, 2),
    ('The Dark Knight', 'Action', 2008, 9, 3),
    ('Alien', 'SciFi', 1979, 9, 4),
    ('Total Recall', 'SciFi', 1990, 8, 5),
    ('The Matrix', 'SciFi', 1999, 8, 6),
    ('The Matrix Resurrections', 'SciFi', 2021, 5, 6),
    ('The Matrix Reloaded', 'SciFi', 2003, 6, 6),
    ('The Hunt for Red October', 'Thriller', 1990, 7, 8),
    ('Misery', 'Thriller', 1990, 7, 9),
    ('The Power Of The Dog', 'Western', 2021, 6, 10),
    ('Hell or High Water', 'Western', 2016, 8, 11),
    ('The Good, the Bad and the Ugly', 'Western', 1966, 9, 12),
    ('Unforgiven', 'Western', 1992, 7, 13);

-- SELECT * with Join
SELECT f.title, f.genre, f.release_year, f.score, d.name "director"
FROM films f INNER JOIN directors d ON f.director_id = d.id;

-- Extension 3
SELECT d.name, COUNT(f.id)
FROM films f INNER JOIN directors d ON f.director_id = d.id
GROUP BY d.name
ORDER BY COUNT(f.id) DESC;
